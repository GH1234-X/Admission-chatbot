import { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { ChevronDown, Search, BookOpen, School } from "lucide-react";
import { collection, getDocs, query, where } from "firebase/firestore";
import { firestore } from "../lib/firebase";
//import ResourcePageHeader from "../components/ResourcePageHeader"; // Correct this line based on your file structure
const EngineeringCutoffs = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCourse, setSelectedCourse] = useState("");
  const [institutes, setInstitutes] = useState([]);
  const [filteredInstitutes, setFilteredInstitutes] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [location, setLocation] = useLocation();

  // List of engineering courses
  const courses = [
    "COMPUTER ENGINEERING",
    "INFORMATION TECHNOLOGY",
    "MECHANICAL ENGINEERING",
    "CIVIL ENGINEERING",
    "ARTIFICIAL INTELLIGENCE AND DATA SCIENCE",
    "ELECTRONICS & COMMUNICATION ENGG",
    "ELECTRICAL ENGINEERING",
    "CHEMICAL ENGINEERING",
    "AUTOMOBILE ENGINEERING",
    "AERONAUTICAL ENGINEERING",
    "All Courses",
  ];

  // Fetch data from Firestore
  useEffect(() => {
    const fetchCutoffData = async () => {
      try {
        setIsLoading(true);
        setError(null);

        console.log("Firebase initialized:", firestore ? "Yes" : "No");

        if (!firestore) {
          throw new Error(
            "Firestore is not initialized. Check Firebase configuration.",
          );
        }

        console.log("Attempting to fetch from 'cutoffs' collection");
        const cutoffsCollection = collection(firestore, "cutoffs");
        let cutoffsQuery = cutoffsCollection;

        // If a course is selected (except "All Courses"), filter by course
        if (selectedCourse && selectedCourse !== "All Courses") {
          console.log("Filtering by course:", selectedCourse);
          cutoffsQuery = query(
            cutoffsCollection,
            where("courseName", "==", selectedCourse),
          );
        }

        const cutoffSnapshot = await getDocs(cutoffsQuery);
        console.log("Cutoff snapshot size:", cutoffSnapshot.size, "documents");

        // Group data by institute and organize by categories
        const groupedData = {};

        cutoffSnapshot.docs.forEach((doc) => {
          const data = doc.data();
          const instName = data.instName || "";
          const courseName = data.courseName || "";
          const category = data.category || "";
          const key = `${instName}|${courseName}`;

          if (!groupedData[key]) {
            groupedData[key] = {
              id: doc.id,
              collegeName: instName,
              course: courseName,
              generalCutoff: "",
              obcCutoff: "",
              scstCutoff: "",
              academicYear: "2023-2024",
            };
          }

          // Set cutoffs based on category
          if (category === "GEN") {
            groupedData[key].generalCutoff = data.lastRank || "";
          } else if (category === "SEBC" || category === "OBC") {
            groupedData[key].obcCutoff = data.lastRank || "";
          } else if (category === "SC" || category === "ST") {
            groupedData[key].scstCutoff = data.lastRank || "";
          }
        });

        // Convert grouped data to array
        const cutoffData = Object.values(groupedData);

        console.log("Processed cutoff data:", cutoffData);
        setInstitutes(cutoffData);
        setFilteredInstitutes(cutoffData);
        setIsLoading(false);
      } catch (err) {
        console.error("Error fetching cutoff data:", err);
        console.error("Error details:", err.code, err.message);
        setError("Failed to load data. Please try again later.");
        setIsLoading(false);
      }
    };

    fetchCutoffData();
  }, [selectedCourse]);

  // Filter institutes based on search query
  useEffect(() => {
    if (searchQuery.trim() === "") {
      setFilteredInstitutes(institutes);
    } else {
      const filtered = institutes.filter((institute) =>
        institute.collegeName.toLowerCase().includes(searchQuery.toLowerCase()),
      );
      setFilteredInstitutes(filtered);
    }
  }, [searchQuery, institutes]);

  const handleCourseChange = (e) => {
    setSelectedCourse(e.target.value);
  };

  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
  };

  return (
    <div className="container mx-auto px-4 py-6">
      <ResourcePageHeader
        title="Engineering Cutoffs"
        actionButton={
          <button
            onClick={() => setLocation("/fees")}
            className="flex items-center gap-2 px-4 py-2 rounded-lg bg-blue-100 text-blue-700 hover:bg-blue-200 transition-colors"
          >
            <BookOpen size={18} />
            View Fees Information
          </button>
        }
      />

      <div className="bg-white rounded-xl shadow-md p-6 mb-8">
        <div className="flex flex-col md:flex-row gap-4 mb-6">
          {/* Course dropdown */}
          <div className="w-full md:w-1/3">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Select Course
            </label>
            <div className="relative">
              <select
                value={selectedCourse}
                onChange={handleCourseChange}
                className="w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 rounded-lg appearance-none"
              >
                <option value="">Select a course</option>
                {courses.map((course, index) => (
                  <option key={index} value={course}>
                    {course}
                  </option>
                ))}
              </select>
              <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                <ChevronDown size={18} />
              </div>
            </div>
          </div>

          {/* Search input */}
          <div className="w-full md:w-2/3">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Search Institute
            </label>
            <div className="relative">
              <input
                type="text"
                value={searchQuery}
                onChange={handleSearchChange}
                placeholder="Search by college name..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <Search size={18} className="text-gray-400" />
              </div>
            </div>
          </div>
        </div>

        {/* Results section */}
        <div className="mt-6">
          {isLoading ? (
            <div className="flex justify-center items-center py-12">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            </div>
          ) : error ? (
            <div className="text-center py-12 text-red-500">{error}</div>
          ) : filteredInstitutes.length === 0 ? (
            <div className="text-center py-12 text-gray-500">
              <School size={48} className="mx-auto mb-4 text-gray-400" />
              <p>No institutes found matching your criteria.</p>
              <p className="text-sm mt-2">
                Try adjusting your search or selecting a different course.
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      College Name
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Course
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      General Cutoff
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      OBC Cutoff
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      SC/ST Cutoff
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Academic Year
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredInstitutes.map((institute) => (
                    <tr key={institute.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="font-medium text-gray-900">
                          {institute.collegeName}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {institute.course}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {institute.generalCutoff}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {institute.obcCutoff}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {institute.scstCutoff}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {institute.academicYear}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default EngineeringCutoffs;
